name: Run Package Tests on GCP Self-Hosted Runner

on:
  workflow_call:
    inputs:
      BRANCH_TAG_NAME:
        required: true
        type: string
        description: 'Branch/tag name to test'
      DATASET_PATH:
        required: true
        type: string
        default: ''
        description: 'Path to dataset file in S3'
      MACHINE_TYPE:
        description: 'Machine type on which to run the performance'
        required: true
        default: 'instance - 16Gb, 4vCPU'
        type: string
      PYTHON_VERSION:
        description: 'Python version of package for running the test'
        required: false
        type: string
        default: '3.10'

permissions:
  id-token: write
  contents: write 
  repository-projects: write

env:
  # INSTANCE_MAP: |
  #   # Replace with actual IDs
  #   instance - 16Gb, 4vCPU=package-test-runner-1
  #   instance - 32Gb, 8vCPU=package-test-runner-2
  #   instance - 64Gb, 16vCPU=package-test-runner-3
  #   instance - 128Gb, 32vCPU=package-test-runner-4
  PROJECT_ID: "development-367210"
  DATASET_BUCKET: "lyric-package-test-datasets"
  DATASET_BUCKET_REGION: "us-east-1"

jobs:
  manage-instance:
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.get-instance-ip.outputs.instance_ip }}
      instance_id: ${{ steps.map-instance.outputs.instance_id }}

    steps:
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          
      - name: Set Project
        run: |
          gcloud config set project "$PROJECT_ID"  # Set your project ID
          echo "GCP project set to $PROJECT_ID"

      - name: Map Human-Readable Instance Type to Instance ID
        id: map-instance
        run: |
          case "${{ github.event.inputs.MACHINE_TYPE }}" in
            "instance - 16Gb, 4vCPU") INSTANCE_ID="package-test-runner-1" ;;
            "instance - 32Gb, 8vCPU") INSTANCE_ID="package-test-runner-2" ;;
            "instance - 64Gb, 16vCPU") INSTANCE_ID="package-test-runner-3" ;;
            "instance - 128Gb, 32vCPU") INSTANCE_ID="package-test-runner-4" ;;
            *) echo "Invalid instance type"; exit 1 ;;
          esac
          echo "::set-output name=instance_id::${INSTANCE_ID}"

      - name: Start GCP VM Instance
        id: start-instance
        run: |
          INSTANCE_ID=${{ steps.map-instance.outputs.instance_id }}
          echo ${{ steps.map-instance.outputs.instance_id }}
          INSTANCE_ZONE=$(gcloud compute instances list "$INSTANCE_ID" --format 'csv[no-heading](zone)')
          gcloud compute instances start "$INSTANCE_ID" --zone "$INSTANCE_ZONE"
          echo "Starting instance with ID: ${INSTANCE_ID}"

      # - name: Wait for Instance to be Running
      #   run: |
      #     INSTANCE_ID=${{ steps.map-instance.outputs.instance_id }}
      #     INSTANCE_ZONE=$(gcloud compute instances list "$INSTANCE_ID" --format 'csv[no-heading](zone)')
      #     gcloud compute instances wait-for-status "$INSTANCE_ID" --zone "$INSTANCE_ZONE" --status RUNNING
      #     echo "Instance $INSTANCE_ID is now running."

      - name: Get Instance Public IP
        id: get-instance-ip
        run: |
          INSTANCE_ID=${{ steps.map-instance.outputs.instance_id }}
          INSTANCE_ZONE=$(gcloud compute instances list "$INSTANCE_ID" --format 'csv[no-heading](zone)')
          IP=$(gcloud compute instances describe "$INSTANCE_ID" --zone "$INSTANCE_ZONE" --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "::set-output name=instance_ip::$IP"
          echo "::set-output name=instance_id::$INSTANCE_ID"

  run-tests:
    needs: manage-instance
    runs-on: ${{ needs.manage-instance.outputs.instance_id }}  # Replace with your self-hosted runner label
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.BRANCH_TAG_NAME }}
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.PYTHON_VERSION }}

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_S3_ROLE_ARN }}
          aws-region: "us-east-1" # Your AWS region

      - name: Pull Sample Data from S3
        run: |
          echo "DATASET_BUCKET_REGION: $DATASET_BUCKET_REGION"
          aws s3 cp "s3://$DATASET_BUCKET/${{ github.event.repository.name }}/${{ inputs.DATASET_PATH }}" ./tests/data/psr_dataset/  --recursive # Pull the dataset files from S3

      - name: Run Tests
        env:
          LYRIC_GITHUB_USERNAME: ${{ secrets.LYRIC_GITHUB_USERNAME }}
          LYRIC_GITHUB_TOKEN: ${{ secrets.LYRIC_GITHUB_TOKEN }}
        run: |
          sudo apt-get update && \
          sudo apt-get install -y --no-install-recommends git
          echo "https://$LYRIC_GITHUB_USERNAME:$LYRIC_GITHUB_TOKEN@github.com" >> $HOME/.git-credentials
          git config --global credential.helper store
          python${{ inputs.PYTHON_VERSION }} -m venv .venv
          source .venv/bin/activate
          poetry install
          poetry run pytest -s tests/psr
          deactivate

  shutdown-instance:
    needs: run-tests
    runs-on: ubuntu-latest
    if: always()  # This ensures the instance is shut down even if the tests fail.

    steps:
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set Project
        run: |
          gcloud config set project "$PROJECT_ID"  # Set your project ID
          echo "GCP project set to $PROJECT_ID"

      - name: Map Human-Readable Instance Type to Instance ID
        id: map-instance
        run: |
          case "${{ github.event.inputs.MACHINE_TYPE }}" in
            "instance - 16Gb, 4vCPU") INSTANCE_ID="package-test-runner-1" ;;
            "instance - 32Gb, 8vCPU") INSTANCE_ID="package-test-runner-2" ;;
            "instance - 64Gb, 16vCPU") INSTANCE_ID="package-test-runner-3" ;;
            "instance - 128Gb, 32vCPU") INSTANCE_ID="package-test-runner-4" ;;
            *) echo "Invalid instance type"; exit 1 ;;
          esac
          echo "::set-output name=instance_id::${INSTANCE_ID}"
      
      - name: Check Runner Queue Status
        id: check-runner
        env:
          GITHUB_TOKEN: ${{ secrets.LYRIC_GITHUB_TOKEN }}
          RUNNER_NAME: ${{ steps.map-instance.outputs.instance_id }}
          ORG: lyric-tech
        run: |
          if ! command -v jq &> /dev/null; then
            echo "jq could not be found, installing..."
            sudo apt-get update
            sudo apt-get install -y jq
          else
            echo "jq is already installed."
          fi
          echo "RUNNER_NAME: $RUNNER_NAME"
          RUNNER_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/orgs/$ORG/actions/runners \
            | jq -r '.runners[] | select(.name == $RUNNER_NAME) | .id')

          if [ -z "$RUNNER_ID" ]; then
            echo "Runner not found."
            exit 1
          fi

          QUEUED_JOBS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/orgs/$ORG/actions/runners/$RUNNER_ID/jobs \
            | jq '[.jobs[] | select(.status == "queued" or .status == "in_progress")] | length')

          if [ "$QUEUED_JOBS" -gt 0 ]; then
            echo "Runner is busy with $QUEUED_JOBS job(s). Skipping shutdown."
            exit 78
          else
            echo "Runner is idle. Proceeding with shutdown."
          fi

      - name: Shut Down GCP VM Instance
        id: shut-down-instance
        if: steps.check-runner.outcome == 'success'
        run: |
          INSTANCE_ID=${{ steps.map-instance.outputs.instance_id }}
          INSTANCE_ZONE=$(gcloud compute instances list "$INSTANCE_ID" --format 'csv[no-heading](zone)')
          gcloud compute instances stop "$INSTANCE_ID" --zone "$INSTANCE_ZONE"
          echo "Shut down instance with ID: $INSTANCE_ID"

      # - name: Wait for Instance to be TERMINATED
      #   run: |
      #     INSTANCE_ID=${{ steps.map-instance.outputs.instance_id }}
      #     INSTANCE_ZONE=$(gcloud compute instances list "$INSTANCE_ID" --format 'csv[no-heading](zone)')
      #     gcloud compute instances wait-for-status "$INSTANCE_ID" --zone "$INSTANCE_ZONE" --status TERMINATED
      #     echo "Instance $INSTANCE_ID is now terminated."
