name: Run Unit and Integration Tests

on:
  workflow_call:

jobs:
  setup:
    name: Set up and Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-python.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.6

      - name: Cache Python dependencies
        id: cache-python
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ~/.virtualenvs
          key: ${{ runner.os }}-python-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install pylint
          pip install poetry
          poetry install --all-extras

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.6

      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ~/.virtualenvs
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run Unit Tests with coverage
        run: poetry run pytest tests/unit --cov-config=.coveragerc --cov -vv --color=yes --continue-on-collection-errors

      - name: Check Unit Test coverage percentage
        run: |
          COVERAGE_THRESHOLD=80

          if [ -f ".coverage" ]; then
            coverage=$(poetry run coverage report | awk '/TOTAL/ { print substr($NF, 1, length($NF)-1) }')
          else
            coverage=0
          fi

          if (( $(echo "$coverage >= $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "Unit Test Code coverage is ${coverage}%."
            exit 0
          else
            echo "Unit Test Code coverage is ${coverage}%. Minimum required coverage is ${COVERAGE_THRESHOLD}%."
            exit 1

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.6

      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ~/.virtualenvs
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run Integration Tests with coverage
        run: poetry run pytest tests/integration --cov-config=.coveragerc --cov -vv --color=yes --continue-on-collection-errors

      - name: Check Integration Test coverage percentage
        run: |
          COVERAGE_THRESHOLD=80

          if [ -f ".coverage" ]; then
            coverage=$(poetry run coverage report | awk '/TOTAL/ { print substr($NF, 1, length($NF)-1) }')
          else
            coverage=0
          fi

          if (( $(echo "$coverage >= $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "Integration Test Code coverage is ${coverage}%."
            exit 0
          else
            echo "Integration Test Code coverage is ${coverage}%. Minimum required coverage is ${COVERAGE_THRESHOLD}%."
            exit 1
